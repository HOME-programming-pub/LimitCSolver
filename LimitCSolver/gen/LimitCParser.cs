//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LimitC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LimitCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, STR=19, CHAR=20, DOUBLE=21, INTEGER=22, AST=23, AMP=24, INCR=25, 
		DECR=26, DIVOP=27, ADDOP=28, SUBOP=29, RETSTAT=30, ID=31, LETTER=32, NUM=33, 
		COMSTART=34, COMEND=35, WS=36, LINEBREAK=37, LABEL=38, LABELLIT=39, MULTILINECOMMENT=40, 
		COMMENT=41, DIR=42;
	public const int
		RULE_prog = 0, RULE_gdecl = 1, RULE_funcDef = 2, RULE_paramListDef = 3, 
		RULE_paramDef = 4, RULE_varDef = 5, RULE_varAssignDef = 6, RULE_funcCall = 7, 
		RULE_paramList = 8, RULE_param = 9, RULE_expr = 10, RULE_lvalue = 11, 
		RULE_constant = 12, RULE_codeBlock = 13, RULE_codeStateList = 14, RULE_termExpr = 15, 
		RULE_assOp = 16, RULE_type = 17, RULE_typeLit = 18, RULE_label = 19;
	public static readonly string[] ruleNames = {
		"prog", "gdecl", "funcDef", "paramListDef", "paramDef", "varDef", "varAssignDef", 
		"funcCall", "paramList", "param", "expr", "lvalue", "constant", "codeBlock", 
		"codeStateList", "termExpr", "assOp", "type", "typeLit", "label"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "','", "'='", "'{'", "'}'", "'+='", "'-='", 
		"'*='", "'/='", "'void'", "'char'", "'short'", "'int'", "'long'", "'float'", 
		"'double'", null, null, null, null, "'*'", "'&'", "'++'", "'--'", "'/'", 
		"'+'", "'-'", "'return'", null, null, null, "'/*'", "'*/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "STR", "CHAR", "DOUBLE", "INTEGER", 
		"AST", "AMP", "INCR", "DECR", "DIVOP", "ADDOP", "SUBOP", "RETSTAT", "ID", 
		"LETTER", "NUM", "COMSTART", "COMEND", "WS", "LINEBREAK", "LABEL", "LABELLIT", 
		"MULTILINECOMMENT", "COMMENT", "DIR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LimitC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LimitCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LimitCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LimitCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LimitCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GdeclContext[] gdecl() {
			return GetRuleContexts<GdeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GdeclContext gdecl(int i) {
			return GetRuleContext<GdeclContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 274878427136L) != 0)) {
				{
				{
				State = 40;
				gdecl();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gdecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdeclContext gdecl() {
		GdeclContext _localctx = new GdeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_gdecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 48;
				funcDef();
				}
				break;
			case 2:
				{
				State = 49;
				varDef();
				}
				break;
			case 3:
				{
				State = 50;
				label();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LimitCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListDefContext paramListDef() {
			return GetRuleContext<ParamListDefContext>(0);
		}
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			type();
			State = 54;
			Match(ID);
			State = 55;
			Match(T__0);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 520192L) != 0)) {
				{
				State = 56;
				paramListDef();
				}
			}

			State = 59;
			Match(T__1);
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				{
				State = 60;
				codeBlock();
				}
				break;
			case T__2:
				{
				State = 61;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamDefContext[] paramDef() {
			return GetRuleContexts<ParamDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDefContext paramDef(int i) {
			return GetRuleContext<ParamDefContext>(i);
		}
		public ParamListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamListDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListDefContext paramListDef() {
		ParamListDefContext _localctx = new ParamListDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_paramListDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			paramDef();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 65;
				Match(T__3);
				State = 66;
				paramDef();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LimitCParser.ID, 0); }
		public ParamDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamDefContext paramDef() {
		ParamDefContext _localctx = new ParamDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_paramDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 72;
			type();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 73;
				Match(ID);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAssignDefContext[] varAssignDef() {
			return GetRuleContexts<VarAssignDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAssignDefContext varAssignDef(int i) {
			return GetRuleContext<VarAssignDefContext>(i);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			type();
			State = 77;
			varAssignDef();
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 78;
				Match(T__3);
				State = 79;
				varAssignDef();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LimitCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarAssignDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssignDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssignDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignDefContext varAssignDef() {
		VarAssignDefContext _localctx = new VarAssignDefContext(Context, State);
		EnterRule(_localctx, 12, RULE_varAssignDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(ID);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 88;
				Match(T__4);
				State = 89;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LimitCParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(ID);
			State = 93;
			Match(T__0);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3086483458L) != 0)) {
				{
				State = 94;
				paramList();
				}
			}

			State = 97;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 16, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			param();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 100;
				Match(T__3);
				State = 101;
				param();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 18, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LValExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public LValExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CastExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesesExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AST() { return GetToken(LimitCParser.AST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVOP() { return GetToken(LimitCParser.DIVOP, 0); }
		public MulDivExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP() { return GetToken(LimitCParser.ADDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryPlusExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP() { return GetToken(LimitCParser.ADDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBOP() { return GetToken(LimitCParser.SUBOP, 0); }
		public AddSubExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionalAssignmentExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssOpContext assOp() {
			return GetRuleContext<AssOpContext>(0);
		}
		public AdditionalAssignmentExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNegationExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBOP() { return GetToken(LimitCParser.SUBOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryNegationExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public FuncCallExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 110;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new LValExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111;
				lvalue(0);
				}
				break;
			case 3:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112;
				funcCall();
				}
				break;
			case 4:
				{
				_localctx = new ParenthesesExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113;
				Match(T__0);
				State = 114;
				expr(0);
				State = 115;
				Match(T__1);
				}
				break;
			case 5:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(ADDOP);
				State = 118;
				expr(6);
				}
				break;
			case 6:
				{
				_localctx = new UnaryNegationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(SUBOP);
				State = 120;
				expr(5);
				}
				break;
			case 7:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(T__0);
				State = 122;
				type();
				State = 123;
				Match(T__1);
				State = 124;
				expr(4);
				}
				break;
			case 8:
				{
				_localctx = new AdditionalAssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126;
				assOp();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 135;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new MulDivExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 129;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 130;
						_la = TokenStream.LA(1);
						if ( !(_la==AST || _la==DIVOP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 131;
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 132;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 133;
						_la = TokenStream.LA(1);
						if ( !(_la==ADDOP || _la==SUBOP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 134;
						expr(3);
						}
						break;
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
	 
		public LvalueContext() { }
		public virtual void CopyFrom(LvalueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LparExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public LparExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLparExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LimitCParser.ID, 0); }
		public VarExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AmpExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LimitCParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public AmpExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(LimitCParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public PreDecrementExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AstExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AST() { return GetToken(LimitCParser.AST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public AstExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(LimitCParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public PreIncrementExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(LimitCParser.INCR, 0); }
		public PostIncrementExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : LvalueContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(LimitCParser.DECR, 0); }
		public PostDecrementExpressionContext(LvalueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		return lvalue(0);
	}

	private LvalueContext lvalue(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LvalueContext _localctx = new LvalueContext(Context, _parentState);
		LvalueContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_lvalue, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new VarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 141;
				Match(ID);
				}
				break;
			case INCR:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142;
				Match(INCR);
				State = 143;
				lvalue(7);
				}
				break;
			case DECR:
				{
				_localctx = new PreDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(DECR);
				State = 145;
				lvalue(6);
				}
				break;
			case T__0:
				{
				_localctx = new LparExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 146;
				Match(T__0);
				State = 147;
				lvalue(0);
				State = 148;
				Match(T__1);
				}
				break;
			case AMP:
				{
				_localctx = new AmpExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				Match(AMP);
				State = 151;
				lvalue(2);
				}
				break;
			case AST:
				{
				_localctx = new AstExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				Match(AST);
				State = 153;
				lvalue(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 160;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new PostIncrementExpressionContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 156;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 157;
						Match(INCR);
						}
						break;
					case 2:
						{
						_localctx = new PostDecrementExpressionContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 158;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 159;
						Match(DECR);
						}
						break;
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CharConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(LimitCParser.CHAR, 0); }
		public CharConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(LimitCParser.STR, 0); }
		public StringConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(LimitCParser.DOUBLE, 0); }
		public DoubleConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LimitCParser.INTEGER, 0); }
		public IntegerConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 24, RULE_constant);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				_localctx = new IntegerConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				Match(INTEGER);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				Match(DOUBLE);
				}
				break;
			case CHAR:
				_localctx = new CharConstantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				Match(CHAR);
				}
				break;
			case STR:
				_localctx = new StringConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 168;
				Match(STR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeStateListContext[] codeStateList() {
			return GetRuleContexts<CodeStateListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeStateListContext codeStateList(int i) {
			return GetRuleContext<CodeStateListContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(T__5);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 279038652482L) != 0)) {
				{
				{
				State = 172;
				codeStateList();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeStateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermExprContext termExpr() {
			return GetRuleContext<TermExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public CodeStateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeStateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeStateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeStateListContext codeStateList() {
		CodeStateListContext _localctx = new CodeStateListContext(Context, State);
		EnterRule(_localctx, 28, RULE_codeStateList);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				codeBlock();
				}
				break;
			case T__0:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case STR:
			case CHAR:
			case DOUBLE:
			case INTEGER:
			case AST:
			case AMP:
			case INCR:
			case DECR:
			case ADDOP:
			case SUBOP:
			case RETSTAT:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				termExpr();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				label();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermExprContext : ParserRuleContext {
		public TermExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termExpr; } }
	 
		public TermExprContext() { }
		public virtual void CopyFrom(TermExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDefExpressionContext : TermExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		public VarDefExpressionContext(TermExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDefExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LooseExpressionContext : TermExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LooseExpressionContext(TermExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLooseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnExpressionContext : TermExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETSTAT() { return GetToken(LimitCParser.RETSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnExpressionContext(TermExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermExprContext termExpr() {
		TermExprContext _localctx = new TermExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_termExpr);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
				_localctx = new VarDefExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				varDef();
				}
				break;
			case T__0:
			case STR:
			case CHAR:
			case DOUBLE:
			case INTEGER:
			case AST:
			case AMP:
			case INCR:
			case DECR:
			case ADDOP:
			case SUBOP:
			case ID:
				_localctx = new LooseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				expr(0);
				State = 187;
				Match(T__2);
				}
				break;
			case RETSTAT:
				_localctx = new ReturnExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189;
				Match(RETSTAT);
				State = 190;
				expr(0);
				State = 191;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssOpContext : ParserRuleContext {
		public AssOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assOp; } }
	 
		public AssOpContext() { }
		public virtual void CopyFrom(AssOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddAssignmentContext : AssOpContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AddAssignmentContext(AssOpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubAssignmentContext : AssOpContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubAssignmentContext(AssOpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarAssignmentContext : AssOpContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarAssignmentContext(AssOpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultAssignmentContext : AssOpContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MultAssignmentContext(AssOpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivAssignmentContext : AssOpContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DivAssignmentContext(AssOpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssOpContext assOp() {
		AssOpContext _localctx = new AssOpContext(Context, State);
		EnterRule(_localctx, 32, RULE_assOp);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new VarAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				lvalue(0);
				State = 196;
				Match(T__4);
				State = 197;
				expr(0);
				}
				break;
			case 2:
				_localctx = new AddAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				lvalue(0);
				State = 200;
				Match(T__7);
				State = 201;
				expr(0);
				}
				break;
			case 3:
				_localctx = new SubAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				lvalue(0);
				State = 204;
				Match(T__8);
				State = 205;
				expr(0);
				}
				break;
			case 4:
				_localctx = new MultAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 207;
				lvalue(0);
				State = 208;
				Match(T__9);
				State = 209;
				expr(0);
				}
				break;
			case 5:
				_localctx = new DivAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 211;
				lvalue(0);
				State = 212;
				Match(T__10);
				State = 213;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AST() { return GetTokens(LimitCParser.AST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AST(int i) {
			return GetToken(LimitCParser.AST, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			typeLit();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AST) {
				{
				{
				State = 218;
				Match(AST);
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLitContext : ParserRuleContext {
		public TypeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLitContext typeLit() {
		TypeLitContext _localctx = new TypeLitContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeLit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 520192L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(LimitCParser.LABEL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILimitCVisitor<TResult> typedVisitor = visitor as ILimitCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 38, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		case 11: return lvalue_sempred((LvalueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool lvalue_sempred(LvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,229,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,0,1,0,1,1,1,1,1,1,3,1,52,8,1,1,2,1,2,1,2,1,2,3,2,58,8,2,
		1,2,1,2,1,2,3,2,63,8,2,1,3,1,3,1,3,5,3,68,8,3,10,3,12,3,71,9,3,1,4,1,4,
		3,4,75,8,4,1,5,1,5,1,5,1,5,5,5,81,8,5,10,5,12,5,84,9,5,1,5,1,5,1,6,1,6,
		1,6,3,6,91,8,6,1,7,1,7,1,7,3,7,96,8,7,1,7,1,7,1,8,1,8,1,8,5,8,103,8,8,
		10,8,12,8,106,9,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,128,8,10,1,10,1,10,1,
		10,1,10,1,10,1,10,5,10,136,8,10,10,10,12,10,139,9,10,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,155,8,11,1,11,
		1,11,1,11,1,11,5,11,161,8,11,10,11,12,11,164,9,11,1,12,1,12,1,12,1,12,
		3,12,170,8,12,1,13,1,13,5,13,174,8,13,10,13,12,13,177,9,13,1,13,1,13,1,
		14,1,14,1,14,3,14,184,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
		194,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,216,8,16,1,17,1,17,5,17,220,
		8,17,10,17,12,17,223,9,17,1,18,1,18,1,19,1,19,1,19,0,2,20,22,20,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,3,2,0,23,23,27,27,1,
		0,28,29,1,0,12,18,248,0,43,1,0,0,0,2,51,1,0,0,0,4,53,1,0,0,0,6,64,1,0,
		0,0,8,72,1,0,0,0,10,76,1,0,0,0,12,87,1,0,0,0,14,92,1,0,0,0,16,99,1,0,0,
		0,18,107,1,0,0,0,20,127,1,0,0,0,22,154,1,0,0,0,24,169,1,0,0,0,26,171,1,
		0,0,0,28,183,1,0,0,0,30,193,1,0,0,0,32,215,1,0,0,0,34,217,1,0,0,0,36,224,
		1,0,0,0,38,226,1,0,0,0,40,42,3,2,1,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,
		1,0,0,0,43,44,1,0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,47,5,0,0,1,47,1,1,
		0,0,0,48,52,3,4,2,0,49,52,3,10,5,0,50,52,3,38,19,0,51,48,1,0,0,0,51,49,
		1,0,0,0,51,50,1,0,0,0,52,3,1,0,0,0,53,54,3,34,17,0,54,55,5,31,0,0,55,57,
		5,1,0,0,56,58,3,6,3,0,57,56,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,62,
		5,2,0,0,60,63,3,26,13,0,61,63,5,3,0,0,62,60,1,0,0,0,62,61,1,0,0,0,63,5,
		1,0,0,0,64,69,3,8,4,0,65,66,5,4,0,0,66,68,3,8,4,0,67,65,1,0,0,0,68,71,
		1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,7,1,0,0,0,71,69,1,0,0,0,72,74,3,
		34,17,0,73,75,5,31,0,0,74,73,1,0,0,0,74,75,1,0,0,0,75,9,1,0,0,0,76,77,
		3,34,17,0,77,82,3,12,6,0,78,79,5,4,0,0,79,81,3,12,6,0,80,78,1,0,0,0,81,
		84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,
		86,5,3,0,0,86,11,1,0,0,0,87,90,5,31,0,0,88,89,5,5,0,0,89,91,3,20,10,0,
		90,88,1,0,0,0,90,91,1,0,0,0,91,13,1,0,0,0,92,93,5,31,0,0,93,95,5,1,0,0,
		94,96,3,16,8,0,95,94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,5,2,0,0,
		98,15,1,0,0,0,99,104,3,18,9,0,100,101,5,4,0,0,101,103,3,18,9,0,102,100,
		1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,17,1,0,0,0,
		106,104,1,0,0,0,107,108,3,20,10,0,108,19,1,0,0,0,109,110,6,10,-1,0,110,
		128,3,24,12,0,111,128,3,22,11,0,112,128,3,14,7,0,113,114,5,1,0,0,114,115,
		3,20,10,0,115,116,5,2,0,0,116,128,1,0,0,0,117,118,5,28,0,0,118,128,3,20,
		10,6,119,120,5,29,0,0,120,128,3,20,10,5,121,122,5,1,0,0,122,123,3,34,17,
		0,123,124,5,2,0,0,124,125,3,20,10,4,125,128,1,0,0,0,126,128,3,32,16,0,
		127,109,1,0,0,0,127,111,1,0,0,0,127,112,1,0,0,0,127,113,1,0,0,0,127,117,
		1,0,0,0,127,119,1,0,0,0,127,121,1,0,0,0,127,126,1,0,0,0,128,137,1,0,0,
		0,129,130,10,3,0,0,130,131,7,0,0,0,131,136,3,20,10,4,132,133,10,2,0,0,
		133,134,7,1,0,0,134,136,3,20,10,3,135,129,1,0,0,0,135,132,1,0,0,0,136,
		139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,21,1,0,0,0,139,137,1,0,
		0,0,140,141,6,11,-1,0,141,155,5,31,0,0,142,143,5,25,0,0,143,155,3,22,11,
		7,144,145,5,26,0,0,145,155,3,22,11,6,146,147,5,1,0,0,147,148,3,22,11,0,
		148,149,5,2,0,0,149,155,1,0,0,0,150,151,5,24,0,0,151,155,3,22,11,2,152,
		153,5,23,0,0,153,155,3,22,11,1,154,140,1,0,0,0,154,142,1,0,0,0,154,144,
		1,0,0,0,154,146,1,0,0,0,154,150,1,0,0,0,154,152,1,0,0,0,155,162,1,0,0,
		0,156,157,10,4,0,0,157,161,5,25,0,0,158,159,10,3,0,0,159,161,5,26,0,0,
		160,156,1,0,0,0,160,158,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,
		1,0,0,0,163,23,1,0,0,0,164,162,1,0,0,0,165,170,5,22,0,0,166,170,5,21,0,
		0,167,170,5,20,0,0,168,170,5,19,0,0,169,165,1,0,0,0,169,166,1,0,0,0,169,
		167,1,0,0,0,169,168,1,0,0,0,170,25,1,0,0,0,171,175,5,6,0,0,172,174,3,28,
		14,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,
		178,1,0,0,0,177,175,1,0,0,0,178,179,5,7,0,0,179,27,1,0,0,0,180,184,3,26,
		13,0,181,184,3,30,15,0,182,184,3,38,19,0,183,180,1,0,0,0,183,181,1,0,0,
		0,183,182,1,0,0,0,184,29,1,0,0,0,185,194,3,10,5,0,186,187,3,20,10,0,187,
		188,5,3,0,0,188,194,1,0,0,0,189,190,5,30,0,0,190,191,3,20,10,0,191,192,
		5,3,0,0,192,194,1,0,0,0,193,185,1,0,0,0,193,186,1,0,0,0,193,189,1,0,0,
		0,194,31,1,0,0,0,195,196,3,22,11,0,196,197,5,5,0,0,197,198,3,20,10,0,198,
		216,1,0,0,0,199,200,3,22,11,0,200,201,5,8,0,0,201,202,3,20,10,0,202,216,
		1,0,0,0,203,204,3,22,11,0,204,205,5,9,0,0,205,206,3,20,10,0,206,216,1,
		0,0,0,207,208,3,22,11,0,208,209,5,10,0,0,209,210,3,20,10,0,210,216,1,0,
		0,0,211,212,3,22,11,0,212,213,5,11,0,0,213,214,3,20,10,0,214,216,1,0,0,
		0,215,195,1,0,0,0,215,199,1,0,0,0,215,203,1,0,0,0,215,207,1,0,0,0,215,
		211,1,0,0,0,216,33,1,0,0,0,217,221,3,36,18,0,218,220,5,23,0,0,219,218,
		1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,35,1,0,0,0,
		223,221,1,0,0,0,224,225,7,2,0,0,225,37,1,0,0,0,226,227,5,38,0,0,227,39,
		1,0,0,0,22,43,51,57,62,69,74,82,90,95,104,127,135,137,154,160,162,169,
		175,183,193,215,221
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
