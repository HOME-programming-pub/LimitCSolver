//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LimitC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="LimitCParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface ILimitCVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProg([NotNull] LimitCParser.ProgContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.gdecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGdecl([NotNull] LimitCParser.GdeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.funcDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncDef([NotNull] LimitCParser.FuncDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.paramListDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParamListDef([NotNull] LimitCParser.ParamListDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.paramDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParamDef([NotNull] LimitCParser.ParamDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.varDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDef([NotNull] LimitCParser.VarDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.varAssignDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarAssignDef([NotNull] LimitCParser.VarAssignDefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCall([NotNull] LimitCParser.FuncCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParamList([NotNull] LimitCParser.ParamListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam([NotNull] LimitCParser.ParamContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lValExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLValExpression([NotNull] LimitCParser.LValExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCastExpression([NotNull] LimitCParser.CastExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesesExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesesExpression([NotNull] LimitCParser.ParenthesesExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>mulDivExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivExpression([NotNull] LimitCParser.MulDivExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] LimitCParser.ConstantExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryPlusExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryPlusExpression([NotNull] LimitCParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addSubExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSubExpression([NotNull] LimitCParser.AddSubExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>additionalAssignmentExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditionalAssignmentExpression([NotNull] LimitCParser.AdditionalAssignmentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryNegationExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryNegationExpression([NotNull] LimitCParser.UnaryNegationExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>funcCallExpression</c>
	/// labeled alternative in <see cref="LimitCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCallExpression([NotNull] LimitCParser.FuncCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lparExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLparExpression([NotNull] LimitCParser.LparExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>varExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarExpression([NotNull] LimitCParser.VarExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ampExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAmpExpression([NotNull] LimitCParser.AmpExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preDecrementExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreDecrementExpression([NotNull] LimitCParser.PreDecrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>astExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAstExpression([NotNull] LimitCParser.AstExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>preIncrementExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreIncrementExpression([NotNull] LimitCParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postIncrementExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostIncrementExpression([NotNull] LimitCParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postDecrementExpression</c>
	/// labeled alternative in <see cref="LimitCParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostDecrementExpression([NotNull] LimitCParser.PostDecrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>integerConstant</c>
	/// labeled alternative in <see cref="LimitCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerConstant([NotNull] LimitCParser.IntegerConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>doubleConstant</c>
	/// labeled alternative in <see cref="LimitCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoubleConstant([NotNull] LimitCParser.DoubleConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>charConstant</c>
	/// labeled alternative in <see cref="LimitCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharConstant([NotNull] LimitCParser.CharConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringConstant</c>
	/// labeled alternative in <see cref="LimitCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringConstant([NotNull] LimitCParser.StringConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.codeBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCodeBlock([NotNull] LimitCParser.CodeBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.codeStateList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCodeStateList([NotNull] LimitCParser.CodeStateListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>varDefExpression</c>
	/// labeled alternative in <see cref="LimitCParser.termExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDefExpression([NotNull] LimitCParser.VarDefExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>looseExpression</c>
	/// labeled alternative in <see cref="LimitCParser.termExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLooseExpression([NotNull] LimitCParser.LooseExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>returnExpression</c>
	/// labeled alternative in <see cref="LimitCParser.termExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnExpression([NotNull] LimitCParser.ReturnExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>varAssignment</c>
	/// labeled alternative in <see cref="LimitCParser.assOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarAssignment([NotNull] LimitCParser.VarAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addAssignment</c>
	/// labeled alternative in <see cref="LimitCParser.assOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddAssignment([NotNull] LimitCParser.AddAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>subAssignment</c>
	/// labeled alternative in <see cref="LimitCParser.assOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubAssignment([NotNull] LimitCParser.SubAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>multAssignment</c>
	/// labeled alternative in <see cref="LimitCParser.assOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultAssignment([NotNull] LimitCParser.MultAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>divAssignment</c>
	/// labeled alternative in <see cref="LimitCParser.assOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivAssignment([NotNull] LimitCParser.DivAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] LimitCParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.typeLit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeLit([NotNull] LimitCParser.TypeLitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LimitCParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLabel([NotNull] LimitCParser.LabelContext context);
}
